<?xml version="1.0"?>

<launch>

  <!-- RViz config file -->
  <arg name="rvizconfig" default="$(find bme_ros_navigation)/rviz/mogi_world.rviz" />

  <!-- URDF file -->
  <arg name="model" default="$(find bme_ros_navigation)/urdf/mogi_bot.xacro"/>

  <!-- Gazebo world file -->
  <arg name="world" default="$(find bme_ros_navigation)/worlds/world_modified.world"/>

  <!-- Robot pose -->
  <!-- Inititalize the robot's position and orientation inside the world -->
  <arg name="x" default="2.5"/>
  <arg name="y" default="1.5"/>
  <arg name="z" default="0"/>
  <arg name="roll" default="0"/>
  <arg name="pitch" default="0"/>
  <arg name="yaw" default="0"/>

  <!-- Launch our Gazebo world -->
  <include file="$(find bme_ros_navigation)/launch/world.launch">
    <!-- all vars that included.launch requires must be set -->
    <arg name="world_file" value="$(arg world)" />
  </include>

  <!-- Find mogi_bot description and send urdf to param server -->
  <param name="robot_description" command="$(find xacro)/xacro $(arg model)" />

  <!-- Send joint values-->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="false"/>
  </node>

  <!-- Send robot states to tf -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>

  <!-- Spawn mogi_bot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" 
    args="-urdf -param robot_description -model mogi_bot 
            -x $(arg x) -y $(arg y) -z $(arg z)
            -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"/>

  <!-- Launch RViz -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)" required="true">
    <remap from="initialpose" to="waypoint" />
  </node>

  <!-- Launch trajectory server -->
  <node pkg="hector_trajectory_server" type="hector_trajectory_server" respawn="false" name="hector_trajectory_server" output="screen">
    <param name="source_frame_name" value="base_footprint"/>
    <param name="target_frame_name" value="odom"/>
  </node>

  <!-- Robot pose EKF for sensor fusion -->
  <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
    <remap from="imu_data" to="/imu/data"/>
    <param name="output_frame" value="odom"/>
    <param name="base_footprint_frame" value="base_footprint"/>
    <param name="freq" value="30.0"/>
    <param name="sensor_timeout" value="1.0"/>
    <param name="odom_used" value="true"/>
    <param name="imu_used" value="true"/>
    <param name="vo_used" value="false"/>
    <param name="gps_used" value="false"/>
    <param name="debug" value="false"/>
    <param name="self_diagnose" value="false"/>
  </node>

  <!--node name="cob_base_velocity_smoother" pkg="cob_base_velocity_smoother"  type="cob_base_velocity_smoother" output="screen">
    <remap from="output" to="cmd_vel"/>
    <remap from="input" to="twist_mux/cmd_vel"/>
    <param name="circular_buffer_capacity" value="6"/>
    <param name="maximal_time_delay" value="1"/>
    <param name="maximal_time_delay_to_stop" value="0.5"/>
    <param name="thresh_max_acc" value="0.1"/>
    <param name="loop_rate" value="30"/>
    <param name="min_input_rate" value="1"/>
  </node-->

  <node pkg="twist_mux" type="twist_mux" name="twist_mux">
    <rosparam command="load" file="$(find bme_ros_navigation)/config/twist_mux.yaml" />
    <!--remap from="cmd_vel_out" to="twist_mux/cmd_vel"/-->
    <remap from="cmd_vel_out" to="cmd_vel"/>
  </node>

</launch>